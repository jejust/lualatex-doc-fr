Ce document est une carte, ou un guide touristique, du nouveau monde de LuaLaTeX. Le public visé va des nouveaux venus (avec une connaissance pratique de LaTeX conventionnel) aux développeurs de paquets. Ce guide se veut exhaustif dans le sens suivant: il contient des pointeurs vers toutes les sources pertinentes, rassemble des informations qui sont autrement dispersées et ajoute des éléments d'introduction.

Vos commentaires et suggestions d'amélioration sont les bienvenus. Ce document est un travail en cours ; merci de votre compréhension et de votre patience.

Bien que centré sur LuaLaTeX, il inclut également des informations pertinentes sur LuaTeX avec le format Plain.

Introduction

Qu'est-ce que LuaLaTeX ?

Pour répondre à cette question, nous devons mentionner quelques détails sur le monde TeX que vous pouvez habituellement ignorer: la différence entre un moteur et un format. Un moteur est un programme informatique réel, tandis qu'un format est un ensemble de macros exécutées par un moteur, généralement préchargé lorsque le moteur est invoqué avec un nom particulier.

En fait, un format est plus ou moins comme une classe de document ou un paquetage, sauf qu'il est associé à un nom de commande particulier. Imaginez qu'il existe une commande "latex-article" qui ferait la même chose que latex, sauf que vous n'auriez pas besoin de dire "\documentclass{article}" au début de votre fichier. De même, dans les distributions actuelles, la commande "pdflatex" est la même que la commande "pdftex", sauf que vous n'avez pas besoin de mettre les instructions pour charger LaTeX au début de votre fichier source. C'est pratique, et légèrement plus efficace aussi.

Les formats sont excellents car ils permettent d'implémenter des commandes puissantes en utilisant les outils de base fournis par un moteur. Cependant, la puissance du format est parfois limitée par l'ensemble des outils du moteur, c'est pourquoi les gens ont commencé à développer des moteurs plus puissants afin que d'autres personnes puissent mettre en \oe uvre des formats (ou des paquets) encore plus puissants. Les moteurs les plus connus actuellement (à l'exception du TeX original) sont pdfTeX, XeTeX et LuaTeX.

Pour compliquer encore le tableau, le moteur TeX original ne produisait que des fichiers DVI, alors que ses successeurs peuvent (aussi) produire des fichiers PDF. Chaque commande de votre système correspond à un moteur particulier, avec un format particulier et un mode de sortie particulier. Le tableau suivant résume cela: les lignes sont indexées par format, les colonnes par moteur, et dans chaque cellule, la première ligne est la commande pour ce moteur avec ce format en mode DVI, et la seconde pour le même mode PDF.

Nous pouvons maintenant répondre à la question du titre: LuaLaTeX est le moteur LuaTeX avec le format LaTeX. Cette réponse n'est pas très satisfaisante si vous ne savez pas ce que sont LuaTeX et LaTeX.

Comme vous le savez probablement, LaTeX est le cadre général dans lequel les documents commencent par "\documentclass", les paquets sont chargés par "\usepackage", les polices sont sélectionnées de manière intelligente (de sorte que vous puissiez passer en gras tout en préservant l'italique), les pages sont construites à l'aide d'algorithmes compliqués comprenant la prise en charge des en-têtes, des pieds de page, des notes de bas de page, des notes de marge, du matériel flottant, etc. Tout cela ne change pas avec LuaLaTeX, mais de nouveaux paquets plus puissants sont disponibles pour améliorer le fonctionnement de certaines parties du système.

Alors, qu'est-ce que LuaTeX ? Version courte: le moteur TeX le plus populaire du moment ! Version longue: c'est le successeur désigné de pdfTeX et il inclut toutes ses fonctionnalités principales: génération directe de fichiers PDF avec support des fonctionnalités PDF avancées et améliorations micro-typographiques des algorithmes typographiques TeX. Les principales nouveautés de LuaTeX sont:

1. Support natif d'Unicode, la norme moderne de classification et d'encodage des caractères, supportant tous les caractères du monde, de l'anglais au chinois traditionnel en passant par l'arabe, y compris de nombreux symboles mathématiques (ou autrement spécialisés).

2. Inclusion de Lua comme langage de script intégré (voir section 1.3 pour plus de détails).

3. Un grand nombre de bibliothèques Lua merveilleuses, y compris:
- "fontloader", supportant les formats de polices modernes tels que TrueType et OpenType;
- "font", permettant une manipulation avancée des polices à partir du document;
- "mplib", une version intégrée du programme graphique MetaPost;
- "callback", qui permet d'accéder à des parties du moteur TeX qui étaient auparavant inaccessibles au programmeur;
- des bibliothèques utilitaires pour la manipulation d'images, de fichiers PDF, etc.

Certaines de ces fonctionnalités, comme le support de l'Unicode, ont un impact direct sur tous les documents, tandis que d'autres fournissent simplement des outils que les auteurs de paquets utiliseront pour vous fournir des commandes plus puissantes et d'autres améliorations.

1.2 Passage de LaTeX à LuaLaTeX

Comme l'explique la section précédente, LuaLaTeX est en grande partie comme LaTeX, avec quelques différences, et des paquets et outils plus puissants disponibles. Nous présentons ici le minimum absolu que vous devez savoir pour produire un document avec LuaLaTeX, tandis que le reste du document fournit plus de détails sur les paquets disponibles.

Il n'y a que trois différences:
1. Ne chargez pas "inputenc", encodez simplement votre source en UTF-8.
2. Ne chargez pas "fontenc" ni "textcomp", mais chargez "fontspec" à la place. 3.
3. "babel" fonctionne avec LuaLaTeX mais vous pouvez charger "polyglossia" à la place.
4. N'utilisez pas de paquet qui change les polices, mais utilisez les commandes de "fontspec" à la place.

Ainsi, vous n'avez qu'à vous familiariser avec "fontspec", ce qui est facile: sélectionnez la police principale (avec empattement) avec "\setmainfont", la police sans empattement avec "\setsansfont" et la police mono-espacée (machine à écrire) avec "\setmonofont". L'argument de ces commandes est le nom convivial de la police, par exemple "Latin Modern Roman" plutôt que "ec-lmr10". Vous voudrez probablement utiliser "\defaultfontfeatures{Ligatures=TeX}" avant ces commandes pour que les substitutions TeX habituelles (comme --- pour un em-dash) fonctionnent.

La bonne nouvelle est que vous pouvez accéder directement à n'importe quelle police de votre système d'exploitation (en plus de celles de votre distribution TeX), y compris les polices TrueType et OpenType, et avoir accès à leurs fonctionnalités les plus avancées. Cela signifie qu'il est désormais facile d'installer pour les utiliser avec LuaLaTeX n'importe quelle police moderne que vous pouvez télécharger ou acheter auprès d'un éditeur et de bénéficier de tout leur potentiel.

Passons maintenant aux mauvaises nouvelles: il n'est pas toujours facile d'obtenir une liste de toutes les polices disponibles. Sous Windows avec TeX Live, l'outil de ligne de commande "fc-list" les liste toutes, mais n'est pas très convivial. Sous Mac OS X, l'application Fontbook liste les polices de votre système, mais pas celles de votre distribution TeX. Même chose avec "fc-list" sous Linux. Autre mauvaise nouvelle: il n'est pas facile d'accéder à vos anciennes polices de cette manière. Heureusement, de plus en plus de polices sont disponibles dans des formats modernes chaque jour (enfin, chaque mois ou année, en fait, si on ne compte que les bonnes polices).

En passant, mentionnons que le contenu de cette section jusqu'à présent vaut aussi pour XeLaTeX, c'est-à-dire LaTeX sur XeTeX. En effet, XeTeX partage deux des caractéristiques essentielles de LuaTeX: l'Unicode natif et le support des formats de polices modernes (mais n'a pas les autres caractéristiques de LuaTeX; d'un autre côté, il est plus stable actuellement). Bien que leurs implémentations concernant les polices soient très différentes, "fontspec" parvient à offrir une interface de polices pratiquement unifiée pour XeLaTeX et LuaLaTeX.

Ainsi, pour bénéficier des nouvelles fonctionnalités de LuaTeX, vous devez abandonner un peu de l'ancien monde, à savoir les polices qui ne sont pas disponibles dans un format moderne (et aussi la liberté d'encoder votre source comme vous le souhaitez, mais UTF-8 est tellement supérieur que celui-ci compte à peine). Le paquetage "luainputenc" fournit divers compromis qui vous permettent de récupérer ces parties (bien que le nom suggère qu'il ne s'agit que des encodages d'entrée, les détails de l'implémentation de l'encodage des polices de LaTeX impliquent que ce paquetage est nécessaire (et fonctionne) pour les anciennes polices également), peut-être au prix de la perte du support réel d'Unicode.

C'est tout ce que vous devez savoir pour commencer à produire des documents avec LuaLaTeX. Je vous recommande de jeter un coup d'oeil au manuel fontspec et d'essayer de compiler un petit document en utilisant des polices amusantes. Vous pourrez ensuite parcourir le reste de ce document comme bon vous semble. La section 5 liste toutes les autres différences entre LaTeX conventionnel et LuaLaTeX que je connais.

############################################################

1.3 Une introduction à Lua-in-TeX

Lua est un joli petit langage, évidemment moins surprenant et beaucoup plus facile à apprendre que TeX en tant que langage de programmation. La référence essentielle est le livre très lisible Programming in Lua, dont la première édition est disponible gratuitement en ligne. Pour un démarrage rapide, je vous recommande de lire les chapitres 1 à 5 et de jeter un coup d'oeil à la partie 3. Notez que toutes les bibliothèques mentionnées dans le chapitre 3 sont incluses dans LuaTeX, mais que la bibliothèque "os" est restreinte pour des raisons de sécurité.

En fonction de votre culture de programmation, vous serez peut-être directement intéressé par le reste de la partie 1 et la partie 2 qui présentent des fonctionnalités plus avancées du langage, mais la partie 4 est inutile dans un contexte LuaTeX, à moins bien sûr que vous ne vouliez hacker LuaTeX lui-même. Enfin, le manuel de référence de Lua est disponible en ligne et est accompagné d'un index très pratique. Passons maintenant à Lua dans LuaTeX. Le principal moyen d'exécuter du code Lua à partir de TeX est la commande "\directlua", qui prend du code Lua arbitraire comme argument. Inversement, vous pouvez passer des informations de Lua à TeX avec tex.sprint (Le nom signifie probablement "estring print" par opposition à "run very fast for a short period of time"). Par exemple,

"l'approximation standard $\pi = \directlua{tex.sprint(math.pi)}$"

imprime "l'approximation standard \u03c0 = 3,1415926535898 '' dans votre document. Vous voyez comme il est facile de mélanger TeX et Lua ?

En fait, il y a quelques problèmes. Examinons d'abord la méthode Lua-Tex, qui est la plus simple (puisqu'il s'agit plus de Lua que de TeX). Si vous regardez le manuel LuaTeX, vous verrez qu'il existe une autre fonction avec un nom plus simple, "tex.print", pour passer des informations de cette façon. Elle fonctionne en insérant virtuellement une ligne complète dans votre source TeX, dont le contenu est son argument. Au cas où vous ne le sauriez pas, TeX fait beaucoup de choses désagréables (d'accord, ce sont généralement des actions gentilles et utiles, mais dans ce cas, elles sont très probablement inattendues, donc je les appelle désagréables) avec les lignes complètes de la source : ignorer les espaces au début et à la fin de la ligne et ajouter un caractère de fin de ligne. La plupart du temps, vous ne voulez pas que cela se produise, donc je recommande d'utiliser "tex.sprint" qui insère virtuellement son argument dans la ligne courante, donc est beaucoup plus prévisible.

Si vous êtes suffisamment bon TeXnicien pour connaître les catcodes, vous serez heureux d'apprendre que "tex.print" et ses variantes vous donnent un contrôle presque total sur les catcodes utilisés pour tokeniser l'argument, puisque vous pouvez spécifier une table de catcodes comme premier argument. Vous voudrez probablement apprendre à connaître les tables de code de chat (actuellement 2.7.6 dans le manuel LuaTeX) avant d'être pleinement satisfait. Si vous ne connaissez pas les catcodes, passez ce paragraphe. (Erf, trop tard, vous l'avez déjà lu).

Examinons maintenant "\directlua". Pour vous faire une idée de son fonctionnement, imaginez qu'il s'agit d'une commande "\write", mais qu'elle écrit uniquement dans un fichier virtuel et s'arrange immédiatement pour que ce fichier soit transmis à l'interpréteur Lua. Du côté de Lua, la conséquence est que chaque argument d'une commande "\directlua" a sa propre portée : les variables locales de l'un ne seront pas visibles par l'autre. (Ce qui est plutôt sain, mais toujours bon à savoir).

Maintenant, le problème majeur est qu'avant d'être transmis à l'interpréteur Lua, l'argument est d'abord lu et tokénisé par TeX, puis entièrement développé et transformé en une chaîne de caractères ordinaire. La lecture par TeX a plusieurs conséquences. L'une d'entre elles est que les fins de lignes sont transformées en espaces, de sorte que l'interpréteur Lua ne voit qu'une (longue) ligne d'entrée. Comme Lua est un langage de forme libre, cela n'a généralement pas d'importance, mais cela en a si vous utilisez des commentaires :

\directlua{a_function()
-- un commentaire
une_autre_fonction()}

ne fera pas ce que vous attendez probablement: "une_autre_fonction()" sera considérée comme faisant partie du commentaire (il ne s'agit que d'une ligne, n'oubliez pas).

Une autre conséquence de la lecture par TeX est que les espaces successifs sont fusionnés en un seul espace, et que les commentaires TeX sont rejetés. Voici donc une version étonnamment correcte de l'exemple précédent.

\directlua{a_function()
% un commentaire
une autre_fonction()}

Il convient également de noter que, puisque l'argument se trouve essentiellement à l'intérieur d'un "\write", il se trouve dans un contexte d'expansion uniquement. Si vous ne savez pas ce que cela signifie, laissez-moi vous dire que les problèmes d'expansion sont principalement ce qui rend la programmation TeX si difficile pour éviter de s'étendre davantage sur ce sujet.

Je suis désolé si les trois derniers paragraphes étaient un peu TeXniques par nature mais j'ai pensé que vous deviez savoir. Pour vous récompenser d'être resté avec moi, voici une astuce de débogage. Mettez le code suivant au début de votre document :

\N- Newwrite\N-luadebug
\immediate\openout\luadebug luadebug.lua
\AtEndDocument{\immediate\closeout\luadebug}
\NNouvelle commande\Ndirectluadebug{\N-immediate\Nrite\N-luadebug}

Ensuite, lorsque vous avez du mal à comprendre pourquoi un appel particulier à "\directlua" ne fait pas ce que vous attendez, remplacez cette instance de la commande par "\directluadebug", compilez comme d'habitude et regardez dans le fichier luadebug.lua produit ce que l'interpréteur Lua a réellement lu.

Le paquet luacode fournit des commandes et des environnements qui aident à des degrés divers à résoudre certains de ces problèmes. Cependant, pour tout sauf des morceaux triviaux de code Lua, il est plus sage d'utiliser un fichier externe contenant uniquement du code Lua définissant des fonctions, puis de le charger et d'utiliser ses fonctions. Par exemple :

\directlua{dofile("my-lua-functions.lua")}
\newcommand*{\greatmacro}[2]{%
\directlua{my_great_function("\luatexluaescapestring{#1}", #2)}}

L'exemple suppose que ma_great_function est définie dans "my-lua-functions.lua" et prend une chaîne de caractères et un nombre comme arguments. Remarquez que nous utilisons soigneusement les primitives "\luatexluaescapestring" sur l'argument chaîne de caractères afin d'échapper à toute barre oblique inverse ou double-citation qu'il pourrait contenir et qui pourrait perturber l'analyseur syntaxique Lua. (Si vous avez déjà utilisé SQL, le concept d'échappement des chaînes de caractères n'est pas nouveau pour vous).

C'est tout ce qui concerne Lua dans TeX. Si vous vous demandez pourquoi "\luatexluaescapestring" a un nom aussi long et stupide, vous devriez lire la section suivante.

1.4 Autres choses à savoir

Au cas où ce ne serait pas évident, le manuel LuaTeX, "luatexref-t.pdf", est une excellente source d'informations sur LuaTeX et vous voudrez probablement le consulter à un moment ou à un autre (bien qu'il soit un peu aride et technique).

Il est important de savoir que les noms des nouvelles primitives de LuaTeX tels que vous les lisez dans le manuel ne sont pas les noms réels que vous pourrez utiliser dans LuaLaTeX. Pour éviter les conflits avec les noms de macros existants, toutes les nouvelles primitives ont été préfixées par "\luatex", à moins qu'elles ne commencent déjà par ce nom. Ainsi, "\luaescapestring" devient "\luatexluaescapetring", tandis que "\luatexversion" reste "\luatexversion". Le raisonnement est détaillé dans la section 4.

Oh, et au fait, ai-je mentionné que LuaTeX est en version bêta et que la version 1.0 est attendue au printemps 2014 ? Vous pouvez en apprendre davantage sur la page de la feuille de route du site LuaTeX. Des versions bêta stables sont publiées régulièrement et sont incluses dans TeX Live depuis 2008 et MikTeX depuis 2.9.

Il n'est pas surprenant que le support de LuaTeX dans LaTeX soit tout nouveau, ce qui signifie qu'il peut être plein de bogues (brillants) et que les choses peuvent changer à tout moment. Vous voudrez peut-être garder votre distribution TeX à jour et éviter d'utiliser LuaLaTeX pour les documents critiques, au moins pendant un certain temps.

En règle générale, ce guide documente les choses telles qu'elles sont au moment où il est écrit ou mis à jour, sans garder trace des changements. Nous espérons que vous mettrez à jour l'ensemble de votre distribution afin de toujours obtenir les versions correspondantes de ce guide et des paquets, formats et moteur qu'il décrit.



############################################################
