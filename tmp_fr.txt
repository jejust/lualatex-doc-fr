Ce document se veut être un guide touristique du nouveau monde de LuaLaTeX. Le public visé va des nouveaux venus (ayant une connaissance pratique du LaTeX conventionnel) aux développeurs de packages. Ce guide se veut exhaustif dans le sens suivant: il contient des pointeurs vers toutes les sources pertinentes, rassemble des informations qui sont autrement dispersées et ajoute des éléments d'introduction.

Vos commentaires et suggestions d'améliorations sont les bienvenus. Ce document est un travail en cours; merci pourr votre bienveillance et votre patience.

Bien que centré sur LuaLaTeX, il inclut également des informations utiles sur LuaTeX utilisé avec le format Plain.

Introduction

Qu'est-ce que LuaLaTeX ?

Pour répondre à cette question, nous devons préciser un détail sur le monde TeX que vous pouvez habituellement négliger: la différence entre un moteur et un format. Un moteur est un programme informatique réel, tandis qu'un format est un ensemble de macros exécutées par un moteur, et généralement préchargé lorsque le moteur est invoqué sous un nom spécifique.

En fait, un format est plus ou moins comme une classe de document ou un paquetage, sauf qu'il est associé à un nom de commande particulier. Imaginez qu'il existe une commande "latex-article" qui ferait la même chose que "latex", sauf que vous n'auriez pas besoin de dire "\documentclass{article}" au début de votre fichier.  De même, dans les distributions actuelles, la commande "pdflatex" est la même que la commande "pdftex", sauf que vous n'avez pas besoin de mettre les instructions pour charger LaTeX au début de votre fichier source. C'est pratique, et légèrement plus efficace aussi.

Les formats sont une belle invention car ils permettent d'implémenter des commandes puissantes, en utilisant les outils de base fournis par le moteur. Cependant, la puissance du format reste limitée par l'ensemble des outils du moteur, c'est pourquoi les gens ont commencé à développer des moteurs plus puissants afin que d'autres personnes puissent mettre en \oe uvre des formats (ou des packages) encore plus puissants. Les moteurs les plus connus actuellement (à l'exception du TeX original) sont pdfTeX, XeTeX et LuaTeX.

Pour compliquer encore le tableau, le moteur TeX original ne produisait que des fichiers DVI, alors que ses successeurs peuvent (aussi) produire des fichiers PDF. Chaque commande de votre système correspond à un moteur particulier avec un format particulier et un mode de sortie particulier. Le tableau suivant résume cela: les lignes indiquent le format, les colonnes le moteur, et dans chaque case, la première ligne est la commande pour ce moteur avec ce format en mode DVI, et la seconde en mode PDF.

Nous pouvons maintenant répondre à la question posée plus haut: LuaLaTeX est le moteur LuaTeX avec le format LaTeX. Cette réponse n'est pas très satisfaisante si vous ne savez pas ce qu'est LuaTeX (et peut-être LaTeX).

Commençons par ce que vous savez peut-être déjà: dans le monde TeX au sens large, LaTeX est le cadre général dans lequel les documents commencent par "\documentclass", les paquets sont chargés par "\usepackage", les polices sont sélectionnées de manière intelligente (de sorte que vous puissiez passer en gras tout en préservant l'italique), les pages sont construites à l'aide d'algorithmes compliqués comprenant la prise en charge des en-têtes, des pieds de page, des notes de bas de page, des notes de marge, des flottants, etc. Tout cela ne change pas avec LuaLaTeX, mais de nouveaux paquets plus puissants sont disponibles pour améliorer le fonctionnement de certaines parties du système.

Alors, qu'est-ce que LuaTeX? Version courte: le moteur TeX le plus populaire du moment! Version longue: c'est le successeur désigné de pdfTeX et il inclut toutes ses fonctionnalités principales: génération directe de fichiers PDF avec support des fonctionnalités PDF avancées et améliorations micro-typographiques des algorithmes typographiques TeX. Les principales nouveautés de LuaTeX sont:

1. Support natif d'Unicode, la norme moderne de classement et d'encodage des caractères, supportant tous les caractères du monde, de l'anglais au chinois traditionnel en passant par l'arabe, y compris de nombreux symboles mathématiques (ou symboles spécifiques d'un autre domaine).

2. Inclusion de Lua comme langage de script intégré (voir section 1.3 pour plus de détails).

3. Un grand nombre de merveilleuses bibliothèques Lua, notamment:
- "fontloader", prenant en charge les formats de polices modernes tels que TrueType et OpenType;
- "font", permettant une manipulation avancée des polices à partir du document;
- "mplib", une version intégrée du programme graphique MetaPost;
- "callback", qui permet d'accéder à des parties du moteur TeX qui étaient auparavant inaccessibles au programmeur;
- des bibliothèques utilitaires pour la manipulation d'images, de fichiers PDF, etc.

Certaines de ces fonctionnalités, comme la prise en charge d'Unicode, ont un impact direct sur tous les documents, tandis que d'autres fournissent simplement des outils que les auteurs de paquets utiliseront pour vous fournir des commandes plus puissantes et d'autres améliorations.

1.2 Passage de LaTeX à LuaLaTeX

Comme l'explique la section précédente, LuaLaTeX est en grande partie comme LaTeX, avec quelques différences, et des paquets et outils plus puissants disponibles. Nous présentons ici le minimum absolu que vous devez savoir pour produire un document avec LuaLaTeX, tandis que le reste du document fournit plus de détails sur les paquets disponibles.

Il n'y a que trois différences:
1. Ne chargez pas "inputenc", encodez simplement votre source en UTF-8.
2. Ne chargez pas "fontenc" ni "textcomp", mais chargez "fontspec" à la place.
3. "babel" fonctionne avec LuaLaTeX mais vous pouvez charger "polyglossia" à la place.
4. N'utilisez pas de paquet qui change les polices, mais utilisez les commandes de "fontspec" à la place.

Ainsi, vous n'avez qu'à vous familiariser avec "fontspec", ce qui est facile: sélectionnez la police principale (avec empattement) avec "\setmainfont", la police sans empattement avec "\setsansfont" et la police à chasse fixe (style machine à écrire) avec "\setmonofont". L'argument de ces commandes est le petit nom de la police, lisible par un humain, par exemple "Latin Modern Roman" et non "ec-lmr10". Vous voudrez probablement utiliser "\defaultfontfeatures{Ligatures=TeX}" avant ces commandes pour que les substitutions TeX habituelles (comme --- pour un em-dash) fonctionnent.

La bonne nouvelle est que vous pouvez accéder directement à n'importe quelle police de votre système d'exploitation (en plus de celles de votre distribution TeX), y compris les polices TrueType et OpenType, et avoir accès à leurs fonctionnalités les plus avancées. Cela signifie qu'il est désormais facile d'installer n'importe quelle police moderne que vous pouvez télécharger ou acheter auprès d'un éditeur, de les utiliser avec LuaLaTeX  et de bénéficier de tout leur potentiel.

Passons maintenant aux mauvaises nouvelles: il n'est pas toujours facile d'obtenir une liste de toutes les polices disponibles. Sous Windows avec TeX Live, l'outil de ligne de commande "fc-list" les liste toutes, mais n'est pas très convivial. Sous Mac OS X, l'application Fontbook liste les polices de votre système, mais pas celles de votre distribution TeX. Même chose avec "fc-list" sous Linux. Autre mauvaise nouvelle: il n'est pas facile d'accéder à vos anciennes polices de cette manière. Heureusement, progressivement, de plus en plus de polices sont disponibles dans des formats modernes.

En passant, mentionnons que le contenu de cette section jusqu'à présent vaut aussi pour XeLaTeX, c'est-à-dire LaTeX sur XeTeX. En effet, XeTeX partage deux des caractéristiques essentielles de LuaTeX: l'Unicode natif et le support des formats de polices modernes (en revance, il n'a pas les autres caractéristiques de LuaTeX; mais actuellement, il est considéré comme plus stable). Bien que leurs implémentations concernant les polices de caractères soient très différentes, "fontspec" parvient à offrir une interface de police pratiquement unifiée pour XeLaTeX et LuaLaTeX.

Ainsi, pour bénéficier des nouvelles fonctionnalités de LuaTeX, vous devez renoncer à un peu de l'ancien monde, à savoir les polices qui ne sont pas disponibles dans un format moderne (ainsi qu'à la liberté d'encoder votre source comme bon vous semble, mais UTF-8 est tellement supérieur aux autres encodages que vous ne perdez quasiment rien au change). Le package "luainputenc" fournit des solutions de transition qui vous permettent de retrouver certains anciens comportemenbts (bien que son nom suggère qu'il ne s'occupe que des encodages d'entrée, l'implémentation de l'encodage des polices en LaTeX implique que ce package est nécessaire (et fonctionne) également pour utiliser les anciennes polices), peut-être au prix de la perte du support réel d'Unicode.

En gros, c'est tout ce que vous devez savoir pour commencer à produire des documents avec LuaLaTeX. Je vous recommande de jeter un coup d'oeil au manuel "fontspec" et d'essayer de compiler un petit document en utilisant des polices amusantes. Vous pourrez ensuite parcourir le reste de ce document comme bon vous semble. La section 5 liste toutes les autres différences que je connais entre LaTeX conventionnel et LuaLaTeX.

############################################################

1.3 Une introduction à Lua-in-TeX

Lua est un petit langage, plutôt bien pensé, bien moins surprenant que TeX en tant que langage de programmation, et beaucoup plus facile à apprendre que lui. La référence essentielle est l'excellent livre  "Programming in Lua", dont la première édition est disponible gratuitement en ligne (en anglais). Pour commencer rapidement, je vous recommande de lire les chapitres~1 à~5 et de jeter un coup d'\oe il à la partie~3. Notez que toutes les bibliothèques mentionnées dans le chapitre~3 sont incluses dans LuaTeX, mais que la bibliothèque "os" est restreinte pour des raisons de sécurité.

En fonction de vos connaissances en matière de programmation, vous serez peut-être directement intéressé par le reste de la partie~1 et la partie~2, qui présentent des fonctionnalités plus avancées du langage, mais la partie 4 est inutile dans un contexte LuaTeX, à moins bien sûr que vous ne vouliez modifier LuaTeX lui-même. Enfin, le manuel de référence de Lua est disponible en ligne et est accompagné d'un index très pratique.

Passons maintenant à l'utilisation de Lua dans LuaTeX. La principale façon d'exécuter du code Lua à partir de TeX est la commande "\directlua", qui prend du code Lua arbitraire comme argument. Inversement, vous pouvez passer des informations de Lua à TeX avec la commande "tex.sprint" (Dans ce nom "sprint" signifie "string print" (imprimer une chaîne), et non "aller très vite"!).  Par exemple,

"approximation standard de $\pi = \directlua{tex.sprint(math.pi)}$"

imprime "approximation standard de \u03c0 = 3,1415926535898 '' dans votre document. Vous voyez comme il est facile de mélanger du TeX et du Lua?

En fait, il y a quelques astuces à noter. Regardons d'abord le passage de Lua vers Tex, c'est le plus simple (puisqu'il s'agit davantage de Lua que de Tex). Si vous consultez le manuel LuaTeX, vous verrez qu'il existe une autre fonction avec un nom plus simple, "tex.print", pour faire passer des informations dans ce sens. Elle fonctionne en insérant virtuellement une ligne complète dans votre source TeX, dont le contenu est son argument. Au cas où vous ne le sauriez pas, TeX fait beaucoup de choses désagréables (d'accord, ce sont généralement des actions utiles et bien intentionnées, mais dans ce cas présent, elles sont inattendues, donc je les appelle désagréables) avec les lignes complètes de la source: ignorer les espaces en début et en fin de ligne et ajouter un caractère de fin de ligne. La plupart du temps, vous ne voulez pas que cela se produise, donc je recommande d'utiliser "tex.sprint" qui insère simplement son argument dans la ligne courante, et donne un résultat plus prévisible.

Si vous êtes suffisamment bon TeXnicien pour connaître les catcodes, vous serez heureux d'apprendre que "tex.print" et ses variantes vous donnent un contrôle presque total sur les catcodes utilisés pour tokeniser l'argument, puisque vous pouvez spécifier une table de catcodes comme premier argument. Les tables de catcodes sont présentées à la section 2.7.6 dans le manuel LuaTeX (dans la version actuelle), vous avez sans doute intérêt à y jeter un oeil. Si vous ne connaissez pas les catcodes, passez ce paragraphe. (Erf, trop tard, vous l'avez déjà lu).

Regardons maintenant "\directlua". Pour vous faire une idée de son fonctionnement, imaginez qu'il s'agit d'une commande "\write", mais qu'elle écrit uniquement dans un fichier virtuel et s'arrange pour que ce fichier soit immédiatement transmis à l'interpréteur Lua. Du côté de Lua, la conséquence est que chaque argument d'une commande "\directlua" a sa propre portée: les variables définies localement dans un argument ne seront pas visibles par le suivant. (Ce qui est plutôt sain, mais toujours bon à savoir).

Maintenant, le problème majeur est qu'avant d'être transmis à l'interpréteur Lua, l'argument est d'abord lu et tokénisé par TeX, puis entièrement développé et transformé en une chaîne de caractères ordinaire. La lecture par TeX a plusieurs conséquences. L'une d'entre elles est que les fins de lignes sont transformées en espaces, de sorte que l'interprète Lua ne voit qu'une (longue) ligne d'entrée. Comme Lua est un langage de forme libre, cela n'a généralement pas d'importance, sauf si vous utilisez des commentaires:

  \directlua{une_fonction()
    % un commentaire
    une_autre_fonction()}

ne fera pas ce que vous attendez probablement: "une_autre_fonction()" sera considéré comme faisant partie du commentaire (tout est mis sur une seule ligne, ne l'oubliez pas).

Une autre conséquence de la lecture par TeX est que les espaces successives sont fusionnés en une unique espace, et que les commentaires TeX sont éliminés. Voici donc une version correcte de l'exemple précédent, de façon surprenante:

  \directlua{une_fonction()
    % un commentaire
    une_autre_fonction()}

Il convient également de noter que, puisque l'argument se trouve essentiellement à l'intérieur d'un "\write", il se trouve dans un contexte d'expansion uniquement. Si vous ne savez pas ce que cela signifie, laissez-moi seulement vous dire que les problèmes d'expansion sont ce qui rend la programmation TeX si difficile et qu'il vaut mieux éviter de développer davantage cette question aujourd'hui.

Je vous prie de m'excuser si les trois derniers paragraphes ont été un peu TeXniques mais j'ai préféré vous prévenir de ces pièges. Pour vous récompenser d'être resté avec moi, voici une astuce de débogage. Mettez le code suivant au début de votre document:

  \newwrite\luadebug
  \immediate\openout\luadebug luadebug.lua
  \AtEndDocument{\immediate\closeout\luadebug}
  \newcommand\directluadebug{\immediate\write\luadebug}

Ensuite, lorsque vous aurez du mal à comprendre pourquoi un appel particulier à "\directlua" ne fait pas ce que vous attendez, remplacez cette instance de la commande par "\directluadebug", compilez comme d'habitude et regardez dans le fichier "luadebug.lua" ce que l'interpréteur Lua a réellement lu.

Le package "luacode" fournit des commandes et des environnements qui aident de différentes façons à résoudre certains de ces problèmes. Cependant, dès que le code Lua utilisé n'est plus trivial, il est plus sage d'utiliser un fichier externe contenant uniquement du code Lua définissant des fonctions, puis de le charger et d'appeler ses fonctions depuis le document LuaTeX. Par exemple:

  \directlua{dofile("mes-functions-lua.lua")}
  \newcommand*{\macrogeniale}[2]{%
  \directlua{ma_fonction_geniale("\luatexluaescapestring{#1}", #2)}}

L'exemple suppose que "ma_fonction_geniale" est définie dans "mes-fonctions-lua.lua" et prend une chaîne de caractères et un nombre comme arguments. Remarquez que nous utilisons soigneusement les primitives "\luatexluaescapestring" sur l'argument chaîne de caractères afin d'échapper à toute barre oblique inverse ou double-citation qu'il pourrait contenir et qui pourrait perturber l'analyseur syntaxique Lua. (Si vous avez déjà utilisé SQL, le concept d'échappement des chaînes de caractères n'est pas nouveau pour vous).

C'est tout pour ce qui concerne Lua dans TeX. Maintenant, si vous vous demandez pourquoi "\luatexluaescapestring" a un nom aussi ridiculement long, lisez la section suivante.

1.4 Autres choses à savoir

Avant toute chose, mentionnons que le manuel LuaTeX, "luatexref-t.pdf", est une excellente source d'informations sur LuaTeX et vous voudrez probablement le consulter à un moment ou à un autre (bien qu'il soit un peu aride et technique).

Il est important de savoir que les noms des nouvelles primitives de LuaTeX tels que vous les lisez dans le manuel ne sont pas les noms réels que vous pourrez utiliser dans LuaLaTeX. Pour éviter les conflits avec les noms de macros existants, toutes les nouvelles primitives ont été préfixées par "\luatex", à moins qu'elles ne commencent déjà par ce nom. Ainsi, "\luaescapestring" devient "\luatexluaescapetring", tandis que "\luatexversion" reste "\luatexversion". Le raisonnement est détaillé dans la section 4.

Oh, et au fait, ai-je mentionné que LuaTeX est en version bêta et que la version 1.0 est attendue au printemps 2014 ? Vous pouvez en apprendre davantage sur la feuille de route présentée sur site web de LuaTeX. Des versions bêta stables sont publiées régulièrement et sont incluses dans TeX Live depuis 2008, et dans MikTeX depuis 2.9.

Le support de LuaTeX dans LaTeX soit tout nouveau, ce qui signifie qu'il peut être plein de bugs et que les choses peuvent encore changer à tout moment. Il est donc important de garder votre distribution TeX à jour (pour avoir les corrections de bugs) et éviter d'utiliser LuaLaTeX pour des documents critiques, au moins pendant un certain temps (pour ne pas rencontrer un nouveau bug au mauvais moment).

En règle générale, ce guide documente les choses telles qu'elles sont au moment où il est écrit ou mis à jour, sans tenir compte des changements. Nous espérons que vous mettrez à jour votre distribution dans son ensemble afin d'obtenir toujours des versions correspondantes de ce guide et des paquets, formats et moteur qu'il décrit.


############################################################
